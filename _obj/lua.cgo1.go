// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/compey/dev/gluau/internal/lua.go:1:1
package internal; import _cgo_unsafe "unsafe"

/*
#cgo CFLAGS: -Iluau/VM/include -I/usr/lib/gcc/x86_64-pc-linux-gnu/14.1.1/include
// #cgo LDFLAGS: -L${SRCDIR}/luau/cmake -lLuau.VM -lm -lstdc++
#include "/home/compey/dev/gluau/internal/luau/VM/include/lua.h"
#include "/home/compey/dev/gluau/internal/luau/VM/include/lualib.h"
#include <stdlib.h>
#include "/home/compey/dev/gluau/internal/clua.h"
*/
import _ "unsafe"
import "unsafe"

type lua_Number float64
type lua_Integer int32
type lua_Unsigned int32

type lua_CFunction func(L * /*line :18:28*/_Ctype_lua_State /*line :18:39*/) int32
type lua_Continuation func(L * /*line :19:31*/_Ctype_lua_State /*line :19:42*/, status int32) int32

type lua_Udestructor = func(* /*line :21:30*/_Ctype_void /*line :21:36*/)
type lua_Destructor = func(L * /*line :22:31*/_Ctype_lua_State /*line :22:42*/, _ unsafe.Pointer)

// type lua_Alloc = func(ud, ptr *C.void, osize, nsize C.size_t) *C.void
type lua_Alloc = func(ptr unsafe.Pointer, osize, nsize uint64) unsafe.Pointer

//export go_allocf
func go_allocf(fp uintptr, ptr uintptr, osize uint64, nsize uint64) uintptr {
	p := ((*((*lua_Alloc)(unsafe.Pointer(fp))))(unsafe.Pointer(ptr), osize, nsize))
	return uintptr(p)
}

//
// ==================
// 	    VM state
// ==================
//

func NewState(ud unsafe.Pointer) * /*line :39:35*/_Ctype_lua_State /*line :39:46*/ {
	return func() *_Ctype_struct_lua_State{ _cgo0 := /*line :40:25*/unsafe.Pointer(ud); _cgoCheckPointer(_cgo0, nil); return /*line :40:44*/_Cfunc_clua_newstate(_cgo0); }()
}

func LuaClose(L * /*line :43:18*/_Ctype_lua_State /*line :43:29*/) {
	func() { _cgo0 := /*line :44:14*/L; _cgoCheckPointer(_cgo0, nil); /*line :44:16*/_Cfunc_lua_close(_cgo0); }()
}

func NewThread(L * /*line :47:19*/_Ctype_lua_State /*line :47:30*/) * /*line :47:33*/_Ctype_lua_State /*line :47:44*/ {
	return func() *_Ctype_struct_lua_State{ _cgo0 := /*line :48:25*/L; _cgoCheckPointer(_cgo0, nil); return /*line :48:27*/_Cfunc_lua_newthread(_cgo0); }()
}

func MainThread(L * /*line :51:20*/_Ctype_lua_State /*line :51:31*/) * /*line :51:34*/_Ctype_lua_State /*line :51:45*/ {
	return func() *_Ctype_struct_lua_State{ _cgo0 := /*line :52:26*/L; _cgoCheckPointer(_cgo0, nil); return /*line :52:28*/_Cfunc_lua_mainthread(_cgo0); }()
}

func ResetThread(L * /*line :55:21*/_Ctype_lua_State /*line :55:32*/) {
	func() { _cgo0 := /*line :56:20*/L; _cgoCheckPointer(_cgo0, nil); /*line :56:22*/_Cfunc_lua_resetthread(_cgo0); }()
}

func IsThreadReset(L * /*line :59:23*/_Ctype_lua_State /*line :59:34*/) bool {
	return func() _Ctype_int{ _cgo0 := /*line :60:29*/L; _cgoCheckPointer(_cgo0, nil); return /*line :60:31*/_Cfunc_lua_isthreadreset(_cgo0); }() != 0
}

//
// ==================
// 	    VM Stack
// ==================
//

func AbsIndex(L * /*line :69:18*/_Ctype_lua_State /*line :69:29*/, idx int32) int32 {
	return int32(func() _Ctype_int{ _cgo0 := /*line :70:30*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :70:38*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :70:44*/_Cfunc_lua_absindex(_cgo0, _cgo1); }())
}

func GetTop(L * /*line :73:16*/_Ctype_lua_State /*line :73:27*/) int32 {
	return int32(func() _Ctype_int{ _cgo0 := /*line :74:28*/L; _cgoCheckPointer(_cgo0, nil); return /*line :74:30*/_Cfunc_lua_gettop(_cgo0); }())
}

func SetTop(L * /*line :77:16*/_Ctype_lua_State /*line :77:27*/, idx int32) {
	func() { _cgo0 := /*line :78:15*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :78:23*/(idx); _cgoCheckPointer(_cgo0, nil); /*line :78:29*/_Cfunc_lua_settop(_cgo0, _cgo1); }()
}

func PushValue(L * /*line :81:19*/_Ctype_lua_State /*line :81:30*/, idx int32) {
	func() { _cgo0 := /*line :82:18*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :82:26*/(idx); _cgoCheckPointer(_cgo0, nil); /*line :82:32*/_Cfunc_lua_pushvalue(_cgo0, _cgo1); }()
}

func Remove(L * /*line :85:16*/_Ctype_lua_State /*line :85:27*/, idx int32) {
	func() { _cgo0 := /*line :86:15*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :86:23*/(idx); _cgoCheckPointer(_cgo0, nil); /*line :86:29*/_Cfunc_lua_remove(_cgo0, _cgo1); }()
}

func Insert(L * /*line :89:16*/_Ctype_lua_State /*line :89:27*/, idx int32) {
	func() { _cgo0 := /*line :90:15*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :90:23*/(idx); _cgoCheckPointer(_cgo0, nil); /*line :90:29*/_Cfunc_lua_insert(_cgo0, _cgo1); }()
}

func Replace(L * /*line :93:17*/_Ctype_lua_State /*line :93:28*/, idx int32) {
	func() { _cgo0 := /*line :94:16*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :94:24*/(idx); _cgoCheckPointer(_cgo0, nil); /*line :94:30*/_Cfunc_lua_replace(_cgo0, _cgo1); }()
}

func CheckStack(L * /*line :97:20*/_Ctype_lua_State /*line :97:31*/, sz int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :98:26*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :98:34*/(sz); _cgoCheckPointer(_cgo0, nil); return /*line :98:39*/_Cfunc_lua_checkstack(_cgo0, _cgo1); }() != 0
}

func RawCheckStack(L * /*line :101:23*/_Ctype_lua_State /*line :101:34*/, sz int32) {
	func() { _cgo0 := /*line :102:22*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :102:30*/(sz); _cgoCheckPointer(_cgo0, nil); /*line :102:35*/_Cfunc_lua_rawcheckstack(_cgo0, _cgo1); }()
}

func XMove(from, to * /*line :105:22*/_Ctype_lua_State /*line :105:33*/, n int32) {
	func() { _cgo0 := /*line :106:14*/from; _cgo1 := /*line :106:20*/to; var _cgo2 _Ctype_int = _Ctype_int /*line :106:29*/(n); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :106:33*/_Cfunc_lua_xmove(_cgo0, _cgo1, _cgo2); }()
}

func XPush(from, to * /*line :109:22*/_Ctype_lua_State /*line :109:33*/, idx int32) {
	func() { _cgo0 := /*line :110:14*/from; _cgo1 := /*line :110:20*/to; var _cgo2 _Ctype_int = _Ctype_int /*line :110:29*/(idx); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :110:35*/_Cfunc_lua_xpush(_cgo0, _cgo1, _cgo2); }()
}

//
// ======================
// 	    Stack Values
// ======================
//

func IsNumber(L * /*line :119:18*/_Ctype_lua_State /*line :119:29*/, idx int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :120:24*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :120:32*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :120:38*/_Cfunc_lua_isnumber(_cgo0, _cgo1); }() != 0
}

func IsString(L * /*line :123:18*/_Ctype_lua_State /*line :123:29*/, idx int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :124:24*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :124:32*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :124:38*/_Cfunc_lua_isstring(_cgo0, _cgo1); }() != 0
}

func IsCFunction(L * /*line :127:21*/_Ctype_lua_State /*line :127:32*/, idx int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :128:27*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :128:35*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :128:41*/_Cfunc_lua_iscfunction(_cgo0, _cgo1); }() != 0
}

func IsLFunction(L * /*line :131:21*/_Ctype_lua_State /*line :131:32*/, idx int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :132:27*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :132:35*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :132:41*/_Cfunc_lua_isLfunction(_cgo0, _cgo1); }() != 0
}

func IsUserData(L * /*line :135:20*/_Ctype_lua_State /*line :135:31*/, idx int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :136:26*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :136:34*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :136:40*/_Cfunc_lua_isuserdata(_cgo0, _cgo1); }() != 0
}

func Type(L * /*line :139:14*/_Ctype_lua_State /*line :139:25*/, idx int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :140:20*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :140:28*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :140:34*/_Cfunc_lua_type(_cgo0, _cgo1); }() != 0
}

func TypeName(L * /*line :143:18*/_Ctype_lua_State /*line :143:29*/, tp int32) string {
	return ( /*line :144:9*/_Cfunc_GoString /*line :144:18*/)(func() *_Ctype_char{ _cgo0 := /*line :144:35*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :144:43*/(tp); _cgoCheckPointer(_cgo0, nil); return /*line :144:48*/_Cfunc_lua_typename(_cgo0, _cgo1); }())
}

func Equal(L * /*line :147:15*/_Ctype_lua_State /*line :147:26*/, idx1, idx2 int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :148:21*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :148:29*/(idx1); var _cgo2 _Ctype_int = _Ctype_int /*line :148:42*/(idx2); _cgoCheckPointer(_cgo0, nil); return /*line :148:49*/_Cfunc_lua_equal(_cgo0, _cgo1, _cgo2); }() != 0
}

func RawEqual(L * /*line :151:18*/_Ctype_lua_State /*line :151:29*/, idx1, idx2 int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :152:24*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :152:32*/(idx1); var _cgo2 _Ctype_int = _Ctype_int /*line :152:45*/(idx2); _cgoCheckPointer(_cgo0, nil); return /*line :152:52*/_Cfunc_lua_rawequal(_cgo0, _cgo1, _cgo2); }() != 0
}

func LessThan(L * /*line :155:18*/_Ctype_lua_State /*line :155:29*/, idx1, idx2 int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :156:24*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :156:32*/(idx1); var _cgo2 _Ctype_int = _Ctype_int /*line :156:45*/(idx2); _cgoCheckPointer(_cgo0, nil); return /*line :156:52*/_Cfunc_lua_lessthan(_cgo0, _cgo1, _cgo2); }() != 0
}

func ToNumberX(L * /*line :159:19*/_Ctype_lua_State /*line :159:30*/, idx int32, isnum bool) lua_Number {
	isnumInner :=  /*line :160:16*/_Ctype_int /*line :160:21*/(0)
	if isnum {
		isnumInner =  /*line :162:16*/_Ctype_int /*line :162:21*/(1)
	}

	return lua_Number(func() _Ctype_double{ _cgo0 := /*line :165:36*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :165:44*/(idx); var _cgo2 *_Ctype_int = /*line :165:51*/&isnumInner; _cgoCheckPointer(_cgo0, nil); return /*line :165:63*/_Cfunc_lua_tonumberx(_cgo0, _cgo1, _cgo2); }())
}

func ToIntegerX(L * /*line :168:20*/_Ctype_lua_State /*line :168:31*/, idx int32, isnum bool) lua_Integer {
	isnumInner :=  /*line :169:16*/_Ctype_int /*line :169:21*/(0)
	if isnum {
		isnumInner =  /*line :171:16*/_Ctype_int /*line :171:21*/(1)
	}

	return lua_Integer(func() _Ctype_int{ _cgo0 := /*line :174:38*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :174:46*/(idx); var _cgo2 *_Ctype_int = /*line :174:53*/&isnumInner; _cgoCheckPointer(_cgo0, nil); return /*line :174:65*/_Cfunc_lua_tointegerx(_cgo0, _cgo1, _cgo2); }())
}

func ToUnsignedX(L * /*line :177:21*/_Ctype_lua_State /*line :177:32*/, idx int32, isnum bool) lua_Unsigned {
	isnumInner :=  /*line :178:16*/_Ctype_int /*line :178:21*/(0)
	if isnum {
		isnumInner =  /*line :180:16*/_Ctype_int /*line :180:21*/(1)
	}

	return lua_Unsigned(func() _Ctype_uint{ _cgo0 := /*line :183:40*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :183:48*/(idx); var _cgo2 *_Ctype_int = /*line :183:55*/&isnumInner; _cgoCheckPointer(_cgo0, nil); return /*line :183:67*/_Cfunc_lua_tounsignedx(_cgo0, _cgo1, _cgo2); }())
}

func ToVector(L * /*line :186:18*/_Ctype_lua_State /*line :186:29*/, idx int32) {
	func() *_Ctype_float{ _cgo0 := /*line :187:17*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :187:25*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :187:31*/_Cfunc_lua_tovector(_cgo0, _cgo1); }()
}

func ToBoolean(L * /*line :190:19*/_Ctype_lua_State /*line :190:30*/, idx int32) bool {
	return func() _Ctype_int{ _cgo0 := /*line :191:25*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :191:33*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :191:39*/_Cfunc_lua_toboolean(_cgo0, _cgo1); }() != 0
}

func ToLString(L * /*line :194:19*/_Ctype_lua_State /*line :194:30*/, idx int32, len *uint64) string {
	return ( /*line :195:9*/_Cfunc_GoString /*line :195:18*/)(func() *_Ctype_char{ _cgo0 := /*line :195:36*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :195:44*/(idx); var _cgo2 *_Ctype_size_t = /*line :195:51*/(*_Ctype_size_t /*line :195:61*/)(len); _cgoCheckPointer(_cgo0, nil); return /*line :195:68*/_Cfunc_lua_tolstring(_cgo0, _cgo1, _cgo2); }())
}

func ToStringAtom(L * /*line :198:22*/_Ctype_lua_State /*line :198:33*/, idx int32, atom *int32) string {
	return ( /*line :199:9*/_Cfunc_GoString /*line :199:18*/)(func() *_Ctype_char{ _cgo0 := /*line :199:39*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :199:47*/(idx); var _cgo2 *_Ctype_int = /*line :199:54*/(*_Ctype_int /*line :199:61*/)(atom); _cgoCheckPointer(_cgo0, nil); return /*line :199:69*/_Cfunc_lua_tostringatom(_cgo0, _cgo1, _cgo2); }())
}

func NameCallAtom(L * /*line :202:22*/_Ctype_lua_State /*line :202:33*/, atom *int32) string {
	return ( /*line :203:9*/_Cfunc_GoString /*line :203:18*/)(func() *_Ctype_char{ _cgo0 := /*line :203:39*/L; var _cgo1 *_Ctype_int = /*line :203:42*/(*_Ctype_int /*line :203:49*/)(atom); _cgoCheckPointer(_cgo0, nil); return /*line :203:57*/_Cfunc_lua_namecallatom(_cgo0, _cgo1); }())
}

func ObjLen(L * /*line :206:16*/_Ctype_lua_State /*line :206:27*/, idx int32) uint64 {
	return uint64(func() _Ctype_int{ _cgo0 := /*line :207:29*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :207:37*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :207:43*/_Cfunc_lua_objlen(_cgo0, _cgo1); }())
}

func ToCFunction(L * /*line :210:21*/_Ctype_lua_State /*line :210:32*/, idx int32) lua_CFunction {
	p := unsafe.Pointer(func() _Ctype_lua_CFunction{ _cgo0 := /*line :211:40*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :211:48*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :211:54*/_Cfunc_lua_tocfunction(_cgo0, _cgo1); }())
	if p == ( /*line :212:10*/_Cmacro_NULL() /*line :212:15*/) {
		return nil
	}

	return *(*lua_CFunction)(p)
}

func ToLightUserdata(L * /*line :219:25*/_Ctype_lua_State /*line :219:36*/, idx int32) unsafe.Pointer {
	return unsafe.Pointer(func() _cgo_unsafe.Pointer{ _cgo0 := /*line :220:46*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :220:54*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :220:60*/_Cfunc_lua_tolightuserdata(_cgo0, _cgo1); }())
}

func ToLightUserdataTagged(L * /*line :223:31*/_Ctype_lua_State /*line :223:42*/, idx int32, tag int32) unsafe.Pointer {
	return unsafe.Pointer(func() _cgo_unsafe.Pointer{ _cgo0 := /*line :224:52*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :224:60*/(idx); var _cgo2 _Ctype_int = _Ctype_int /*line :224:72*/(tag); _cgoCheckPointer(_cgo0, nil); return /*line :224:78*/_Cfunc_lua_tolightuserdatatagged(_cgo0, _cgo1, _cgo2); }())
}

func ToUserdata(L * /*line :227:20*/_Ctype_lua_State /*line :227:31*/, idx int32) unsafe.Pointer {
	return unsafe.Pointer(func() _cgo_unsafe.Pointer{ _cgo0 := /*line :228:41*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :228:49*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :228:55*/_Cfunc_lua_touserdata(_cgo0, _cgo1); }())
}

func ToUserdataTagged(L * /*line :231:26*/_Ctype_lua_State /*line :231:37*/, idx int32, tag int32) unsafe.Pointer {
	return unsafe.Pointer(func() _cgo_unsafe.Pointer{ _cgo0 := /*line :232:47*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :232:55*/(idx); var _cgo2 _Ctype_int = _Ctype_int /*line :232:67*/(tag); _cgoCheckPointer(_cgo0, nil); return /*line :232:73*/_Cfunc_lua_touserdatatagged(_cgo0, _cgo1, _cgo2); }())
}

func UserdataTag(L * /*line :235:21*/_Ctype_lua_State /*line :235:32*/, idx int32) int32 {
	return int32(func() _Ctype_int{ _cgo0 := /*line :236:33*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :236:41*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :236:47*/_Cfunc_lua_userdatatag(_cgo0, _cgo1); }())
}

func LightUserdataTag(L * /*line :239:26*/_Ctype_lua_State /*line :239:37*/, idx int32) int32 {
	return int32(func() _Ctype_int{ _cgo0 := /*line :240:38*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :240:46*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :240:52*/_Cfunc_lua_lightuserdatatag(_cgo0, _cgo1); }())
}

func ToThread(L * /*line :243:18*/_Ctype_lua_State /*line :243:29*/, idx int32) * /*line :243:43*/_Ctype_lua_State /*line :243:54*/ {
	return func() *_Ctype_struct_lua_State{ _cgo0 := /*line :244:24*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :244:32*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :244:38*/_Cfunc_lua_tothread(_cgo0, _cgo1); }()
}

func ToBuffer(L * /*line :247:18*/_Ctype_lua_State /*line :247:29*/, idx int32, len *uint64) unsafe.Pointer {
	return unsafe.Pointer(func() _cgo_unsafe.Pointer{ _cgo0 := /*line :248:39*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :248:47*/(idx); var _cgo2 *_Ctype_size_t = /*line :248:54*/(*_Ctype_size_t /*line :248:64*/)(len); _cgoCheckPointer(_cgo0, nil); return /*line :248:71*/_Cfunc_lua_tobuffer(_cgo0, _cgo1, _cgo2); }())
}

func ToPointer(L * /*line :251:19*/_Ctype_lua_State /*line :251:30*/, idx int32) unsafe.Pointer {
	return unsafe.Pointer(func() _cgo_unsafe.Pointer{ _cgo0 := /*line :252:40*/L; var _cgo1 _Ctype_int = _Ctype_int /*line :252:48*/(idx); _cgoCheckPointer(_cgo0, nil); return /*line :252:54*/_Cfunc_lua_topointer(_cgo0, _cgo1); }())
}

// =======================
// 	 Stack Manipulation
// =======================

func PushNil(L * /*line :259:17*/_Ctype_lua_State /*line :259:28*/) {
	func() { _cgo0 := /*line :260:16*/L; _cgoCheckPointer(_cgo0, nil); /*line :260:18*/_Cfunc_lua_pushnil(_cgo0); }()
}

func PushNumber(L * /*line :263:20*/_Ctype_lua_State /*line :263:31*/, n lua_Number) {
	func() { _cgo0 := /*line :264:19*/L; var _cgo1 _Ctype_double = _Ctype_lua_Number /*line :264:34*/(n); _cgoCheckPointer(_cgo0, nil); /*line :264:38*/_Cfunc_lua_pushnumber(_cgo0, _cgo1); }()
}

func PushInteger(L * /*line :267:21*/_Ctype_lua_State /*line :267:32*/, n lua_Integer) {
	func() { _cgo0 := /*line :268:20*/L; var _cgo1 _Ctype_int = _Ctype_lua_Integer /*line :268:36*/(n); _cgoCheckPointer(_cgo0, nil); /*line :268:40*/_Cfunc_lua_pushinteger(_cgo0, _cgo1); }()
}

func PushUnsigned(L * /*line :271:22*/_Ctype_lua_State /*line :271:33*/, n lua_Unsigned) {
	func() { _cgo0 := /*line :272:21*/L; var _cgo1 _Ctype_uint = _Ctype_lua_Unsigned /*line :272:38*/(n); _cgoCheckPointer(_cgo0, nil); /*line :272:42*/_Cfunc_lua_pushunsigned(_cgo0, _cgo1); }()
}

func PushLString(L * /*line :275:21*/_Ctype_lua_State /*line :275:32*/, s string, l uint64) {
	cs := ( /*line :276:8*/_Cfunc_CString /*line :276:16*/)(s)
	defer func() func() { _cgo0 := /*line :277:15*/unsafe.Pointer(cs); return func() { _cgoCheckPointer(_cgo0, nil); /*line :277:34*/_Cfunc_free(_cgo0); }}()()

	func() { _cgo0 := /*line :279:20*/L; var _cgo1 *_Ctype_char = /*line :279:23*/cs; var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :279:35*/(l); _cgoCheckPointer(_cgo0, nil); /*line :279:39*/_Cfunc_lua_pushlstring(_cgo0, _cgo1, _cgo2); }()
}

func PushString(L * /*line :282:20*/_Ctype_lua_State /*line :282:31*/, s string) {
	cs := ( /*line :283:8*/_Cfunc_CString /*line :283:16*/)(s)
	defer func() func() { _cgo0 := /*line :284:15*/unsafe.Pointer(cs); return func() { _cgoCheckPointer(_cgo0, nil); /*line :284:34*/_Cfunc_free(_cgo0); }}()()

	func() { _cgo0 := /*line :286:19*/L; var _cgo1 *_Ctype_char = /*line :286:22*/cs; _cgoCheckPointer(_cgo0, nil); /*line :286:25*/_Cfunc_lua_pushstring(_cgo0, _cgo1); }()
}

// NOTE: We can't have lua_pushfstringL, since varadic
// arguments from Go->C isn't something that is possible.
// func PushFStringL(L *C.lua_State, fmt string) {}

func PushCClosureK(L * /*line :293:23*/_Ctype_lua_State /*line :293:34*/, f lua_CFunction, debugname string, nup int32, cont lua_Continuation) {
	cdebugname := ( /*line :294:16*/_Cfunc_CString /*line :294:24*/)(debugname)
	defer func() func() { _cgo0 := /*line :295:15*/unsafe.Pointer(cdebugname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :295:42*/_Cfunc_free(_cgo0); }}()()

	func() { _cgo0 := /*line :297:22*/L; var _cgo1 *[0]byte = /*line :297:25*/(_Ctype_lua_CFunction /*line :297:41*/)(f); var _cgo2 *_Ctype_char = /*line :297:47*/cdebugname; var _cgo3 _Ctype_int = _Ctype_int /*line :297:64*/(nup); var _cgo4 *[0]byte = /*line :297:71*/(*_Ctype_lua_Continuation /*line :297:91*/)(cont); _cgoCheckPointer(_cgo0, nil); /*line :297:99*/_Cfunc_lua_pushcclosurek(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
}

// TODO: Rest of it
